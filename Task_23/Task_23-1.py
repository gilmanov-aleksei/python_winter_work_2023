#! /usr/bin/python

# Найдите длину наибольшей подстроки данной строки, которая
# является палиндромом.
# Например, дана строка 'aabbccddcc' тогда длиной подстроки с
# наибольшим палиндромом является 6 (подстрока 'ccddcc')

def find_long_palindrome(txt):
    # Создаём пустой словарь для сбора полиндромов
    dct = {}
    # Переменная максимальной длины полиндорма,
    # меньше двух символов не полиндром
    max_len = 2
    # Цикл перебора всей строки
    for i in range(len(txt)):
        # Цикл перебора по элементно
        for j in range(len(txt), i, -1):
            # Срез строки в переменную x
            x = txt[i:j]
            # Сравниваем срез строки с его перевернутым срезом,
            # если не равно, то пропускаем, так как не полиндром
            # И длину полиндрома, если он меньше предыдущего , то пропускаем
            if x == x[::-1] and len(x) >= max_len:
                # Записывем длину палендрома в переменную max_len
                max_len = len(x)
                # Ключом в словаре будет длина полиндрома
                # Проверяем ключ в словаре, если он есть,
                # добавляем в значение к текущему списку, новый полиндром
                if max_len in dct:
                    dct[max_len].append(x)
                # Если нет, то в значение создаем список с полиндромом
                else:
                    dct[max_len] = [x]
    # По максимальному значению ключа в словаре
    # значение этого ключа сохраняем в список
    # Список преобразуем в строку
    word = ', '.join(dct.get(max_len))
    return word, max_len


string = 'aababcacdedcaceeefffeeeklmonmlka1s2d3d2s1ceeefffeeek'
flp = find_long_palindrome(string)
# Результат выводим на экран
print("Палиндром:", flp[0])
print("Длина полиндрома:", flp[1])
