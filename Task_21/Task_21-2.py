#! /usr/bin/python

# Задача 21-2
# Напишите функцию, которая находит оптимальный маршрут из верхнего
# левого угла в правый нижний угол матрицы. Двигаться можно только вправо
# или вниз. В каждой клетке матрице содержится число. Оптимальным
# считается маршрут с минимальной суммой чисел клеток, через которые
# проходит маршрут.
#
# Например, если матрица 3 х 3 :
# [[10,20,30], [5,1,80], [90,2,70]], то оптимальным будем маршрут,
# который проходит через клетки 10 + 5 + 1 + 2 + 70 = 88.
# Подсказка: полный перебор вариантов заведомо неэффективен.
# Возможное решение идти от начала и запоминать оптимальные маршруты
# для каждой клетки из начала.


def find_optimal_route(matrix):
    # Узнаём количество строк в двумерной матрице
    m = len(matrix)
    # Узнаём количество столбцов в первой строке двумерной матрицы
    n = len(matrix[0])
    dp = [[0] * n for _ in range(m)]
    # Найдем сумму чисел на пути вдоль первой колонки
    for i in range(m):
        dp[i][0] = matrix[i][0] if i == 0 else dp[i - 1][0] + matrix[i][0]
    # Найдем сумму чисел на пути вдоль первой строки
    for j in range(n):
        dp[0][j] = matrix[0][j] if j == 0 else dp[0][j - 1] + matrix[0][j]
    # Найдем оптимальный маршрут заполнив оставшиеся ячейки
    for i in range(1, m):
        for j in range(1, n):
            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j]
    # Найдем путь с помощью бэктрекинга
    pathn = []
    i, j = m - 1, n - 1
    pathi = [(i, j)]
    while i >= 0 and j >= 0:
        pathn.append(matrix[i][j])
        if i == 0:
            j -= 1
        elif j == 0:
            i -= 1
        else:
            if dp[i - 1][j] < dp[i][j - 1]:
                i -= 1
            else:
                j -= 1
        pathi.append((i, j))
    pathi.pop()
    pathn.reverse()
    print("Маршрут по ячейкам: ", pathi[::-1])
    print("Маршрут по значениям: ", pathn)
    return dp[m - 1][n - 1]


matrix = [[10, 20, 30], [5, 1, 80], [90, 2, 70]]
print("Матрица: ", *matrix)
result = find_optimal_route(matrix)
print("Сумма наименьшего маршрута: ", result)
